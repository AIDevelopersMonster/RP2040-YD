from machine import Pin
import neopixel
import time
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ (GPIO 24) –∏ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤ WS2812 (GPIO 23)
button = Pin(24, Pin.IN, Pin.PULL_UP)
num_leds = 1
np = neopixel.NeoPixel(Pin(23), num_leds)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤
def show_color(color):
    for i in range(num_leds):
        np[i] = color
    np.write()

# –§—É–Ω–∫—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —É–º–Ω–æ–∂–µ–Ω–∏—è —Å –ø—Å–µ–≤–¥–æ–≥—Ä–∞—Ñ–∏–∫–æ–π
def explain_multiplication():
    print("                                        ")
    print(" üì¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï:                        ")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë –£–º–Ω–æ–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è,            ‚ïë")
    print("‚ïë –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑     ‚ïë")
    print("‚ïë –æ–¥–Ω–æ —á–∏—Å–ª–æ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º.   ‚ïë")
    print("‚ïë –ù–∞–ø—Ä–∏–º–µ—Ä: 3 * 4 ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ   ‚ïë")
    print("‚ïë —á–∏—Å–ª–æ 3 —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è 4 —Ä–∞–∑–∞:        ‚ïë")
    print("‚ïë  3 + 3 + 3 + 3 = 12                ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n")
    print("–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º —É–º–Ω–æ–∂–∏—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞!\n")

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞
def generate_problem():
    a = random.randint(1, 9)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 9
    b = random.randint(1, 9)
    correct_answer = a * b
    return a, b, correct_answer

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π
def check_answer():
    while True:
        a, b, correct_answer = generate_problem()
        print(f"\n–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: {a} * {b} = ?")
        
        try:
            user_answer = int(input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç: "))
        except ValueError:
            print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            continue

        print("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞...")
        
        while button.value():  # –ñ–¥—ë–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            time.sleep(0.1)
        
        if user_answer == correct_answer:
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            show_color((0, 255, 0))  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
            print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {a} * {b} = {correct_answer}")
            print(f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –£–º–Ω–æ–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ {a} —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è {b} —Ä–∞–∑, —Ç.–µ. {a} + {a} + {a} + ... ({b} —Ä–∞–∑) = {correct_answer}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
            show_color((255, 0, 0))  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
            print(f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –£–º–Ω–æ–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ {a} —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è {b} —Ä–∞–∑, —Ç.–µ. {a} + {a} + {a} + ... ({b} —Ä–∞–∑) = {correct_answer}")
        
        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        show_color((0, 0, 0))  # –í—ã–∫–ª—é—á–∞–µ–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã
        print("\n–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä...\n")

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
try:
    explain_multiplication()  # –û–±—ä—è—Å–Ω—è–µ–º —É–º–Ω–æ–∂–µ–Ω–∏–µ
    check_answer()  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
except KeyboardInterrupt:
    print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl + C).")
    show_color((0, 0, 0))  # –í—ã–∫–ª—é—á–∞–µ–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥
